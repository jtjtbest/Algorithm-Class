If a binary tree is balanced, the depth of every node's left and right subtree differ by at most 1.
Input: TreeNode root
Ouptput: boolean whether the tree is balanced or not
Algorithm: 1. use recursive methods to get the tree height of left and right subtree, 
           2. if the difference is larger than 1 return false
           3. do this for every sub tree




public class Solution {
  public boolean isBalanced(TreeNode root) {
    // Write your solution here
    if (root == null) {
      return true;
    }

    int leftHeight = getHeight(root.left);
    int rightHeight = getHeight(root.right);
    if (Math.abs(leftHeight - rightHeight) > 1) {
      return false;
    }
    return isBalanced(root.left) && isBalanced(root.right);
  }

  private int getHeight(TreeNode root) {
    if (root == null) {
      return 0;
    }
    return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
  }
}
